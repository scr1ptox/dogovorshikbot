# bot.py
import logging
import os
from pathlib import Path

from dotenv import load_dotenv
from telegram.constants import ParseMode
from telegram.ext import Application, Defaults

from handlers import conv_handler


PROJECT_ROOT = Path(__file__).resolve().parent
TEMPLATES_DIR = PROJECT_ROOT / "templates"
OUTPUT_DIR = PROJECT_ROOT / "output" / "ready_contracts"
DATA_DIR = PROJECT_ROOT / "data"
COUNTER_FILE = DATA_DIR / "counter.json"


def ensure_project_layout() -> None:
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω—É–∂–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏/—Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç.
    –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç, –µ—Å–ª–∏ –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤.
    """
    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    DATA_DIR.mkdir(parents=True, exist_ok=True)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º counter.json, –µ—Å–ª–∏ –ø—É—Å—Ç–æ/–Ω–µ—Ç
    if not COUNTER_FILE.exists() or COUNTER_FILE.stat().st_size == 0:
        COUNTER_FILE.write_text("{}", encoding="utf-8")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
    missing = []
    for name in ("murabaha_template.docx", "murabaha_schedule.docx"):
        if not (TEMPLATES_DIR / name).exists():
            missing.append(name)
    if missing:
        logging.warning("‚ö†Ô∏è Missing templates: %s (put them into %s)",
                        ", ".join(missing), TEMPLATES_DIR)


def setup_logging() -> None:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–∞–∫–æ–Ω–∏—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
    """
    log_fmt = "%(asctime)s | %(levelname)s | %(name)s | %(message)s"
    logging.basicConfig(level=logging.INFO, format=log_fmt)
    # –£–±–µ—Ä—ë–º —à—É–º –æ—Ç httpx / PTB, –æ—Å—Ç–∞–≤–∏–º –∏–Ω—Ñ–æ-—É—Ä–æ–≤–µ–Ω—å
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("telegram.vendor.ptb_urllib3.urllib3").setLevel(logging.WARNING)


async def on_startup(_: Application) -> None:
    logging.info("‚úÖ dogovorshikbot started (polling)")


async def on_shutdown(_: Application) -> None:
    logging.info("üõë dogovorshikbot stopped")


def main() -> None:
    load_dotenv()
    setup_logging()
    ensure_project_layout()

    token = os.getenv("BOT_TOKEN")
    if not token:
        raise RuntimeError("BOT_TOKEN is not set. Put it into .env or env vars.")

    # –ü–∞—Ä—Å–∏–º HTML –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ —Ç.–ø.)
    defaults = Defaults(parse_mode=ParseMode.HTML)

    app = Application.builder().token(token).defaults(defaults).build()

    # –•—ç–Ω–¥–ª–µ—Ä –¥–∏–∞–ª–æ–≥–∞ (–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç conv_handler)
    app.add_handler(conv_handler)

    # –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –æ—à–∏–±–∫–∏ ‚Äî —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –º–æ–ª—á–∞
    async def error_handler(_, context):
        logging.exception("Unhandled error: %s", context.error)

    app.add_error_handler(error_handler)

    # –•—É–∫–∏ —Å—Ç–∞—Ä—Ç–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    app.post_init = on_startup
    app.post_stop = on_shutdown

    # –ó–∞–ø—É—Å–∫
    app.run_polling(close_loop=False)


if __name__ == "__main__":
    main()